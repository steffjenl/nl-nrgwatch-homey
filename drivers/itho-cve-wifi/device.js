'use strict';

const Homey = require('homey');
const NRGWatchApi = require('../../lib/nrgwatch-api');

module.exports = class IthoCveWifi extends Homey.Device {

  /**
   * onInit is called when the device is initialized.
   */
  async onInit() {
    this.api = new NRGWatchApi();
    this.api.setHomeyObject(this.homey);
    const settings = this.getSettings();
    this.api.setSettings(settings.host, settings.username, settings.password, settings.isAuthenticated, settings.enableVirtualRemote);

    // Initial status update
    await this.updateStatus();

    // Update status every 10 minutes
    this.pollingInterval = this.homey.setInterval(() => {
      this.updateStatus();
    }, (settings.refreshInterval ?? 15) * 1000);

    this.registerCapabilityListener('fan_mode', async (value) => {
      this.log('Setting fan_mode to', value);
      return this.api.setFanMode(value);
    });

    this.registerCapabilityListener('fan_speed', async (value) => {
      this.log('Setting fan_speed to', value);
      return this.api.setFanSpeed(value);
    });

    await this.createAndRemoveCabapilities();

    this.log('IthoCveWifi has been initialized');
  }

  async createAndRemoveCabapilities() {
    if (!this.hasCapability('measure_co2')) {
      await this.addCapability('measure_co2');
      this.log('Added measure_co2 capability');
    }
    if (!this.hasCapability('fan_mode')) {
      await this.addCapability('fan_mode');
      this.log('Added fan_mode capability');
    }
    if (!this.hasCapability('fan_speed')) {
      await this.addCapability('fan_speed');
      this.log('Added fan_speed capability');
    }
    if (!this.hasCapability('measure_humidity')) {
      await this.addCapability('measure_humidity');
      this.log('Added measure_humidity capability');
    }
    if (!this.hasCapability('measure_temperature')) {
      await this.addCapability('measure_temperature');
      this.log('Added measure_temperature capability');
    }
    if (!this.hasCapability('measure_speed.fan_speed')) {
      await this.addCapability('measure_speed.fan_speed');
      this.log('Added measure_speed.fan_speed capability');
    }
    if (!this.hasCapability('measure_speed.fan_setpoint')) {
      await this.addCapability('measure_speed.fan_setpoint');
      this.log('Added measure_speed.fan_setpoint capability');
    }
  }

  async updateStatus() {
    try {
      const status = await this.api.getStatus();
      this.log('Fetched IthoCveWifi status');
      this.setCapabilityValue('measure_temperature', status.temp)
        .catch(this.error);
      this.setCapabilityValue('measure_humidity', status.hum)
        .catch(this.error);
      this.setCapabilityValue('measure_co2', status['CO2level (ppm)'] ?? status['Highest CO2 concentration (ppm)'])
        .catch(this.error);
      this.setCapabilityValue('measure_speed.fan_speed', status['Fan setpoint (rpm)'])
        .catch(this.error);
      this.setCapabilityValue('measure_speed.fan_setpoint', status['Fan speed (rpm)'])
        .catch(this.error);
      if (status.Selection === 2) {
        await this.setCapabilityValue('fan_mode', 'low');
      } else if (status.Selection === 3) {
        await this.setCapabilityValue('fan_mode', 'medium');
      } else if (status.Selection === 4) {
        await this.setCapabilityValue('fan_mode', 'high');
      } else if (status.Selection === 5) {
        await this.setCapabilityValue('fan_mode', 'timer1');
      } else if (status.Selection === 7) {
        await this.setCapabilityValue('fan_mode', 'auto');
      } else {
        // Unknown mode, set to auto
      }

    } catch (error) {
      this.error('Error fetching IthoCveWifi status:', error);
    }
  }

  /**
   * onAdded is called when the user adds the device, called just after pairing.
   */
  async onAdded() {
    this.log('IthoCveWifi has been added');
  }

  /**
   * onSettings is called when the user updates the device's settings.
   * @param {object} event the onSettings event data
   * @param {object} event.oldSettings The old settings object
   * @param {object} event.newSettings The new settings object
   * @param {string[]} event.changedKeys An array of keys changed since the previous version
   * @returns {Promise<string|void>} return a custom message that will be displayed
   */
  async onSettings({
    oldSettings,
    newSettings,
    changedKeys
  }) {
    this.api.setSettings(newSettings.host, newSettings.username, newSettings.password, newSettings.isAuthenticated, newSettings.enableVirtualRemote);

    // Initial status update
    await this.updateStatus();

    // Clear previous interval
    this.homey.clearInterval(this.pollingInterval);

    // Update status every 10 minutes
    this.pollingInterval = this.homey.setInterval(() => {
      this.log('Fetched IthoCveWifi status', newSettings.refreshInterval);
      this.updateStatus();
    }, (newSettings.refreshInterval ?? 15) * 1000);
    this.log('IthoCveWifi settings where changed');
  }

  /**
   * onRenamed is called when the user updates the device's name.
   * This method can be used this to synchronise the name to the device.
   * @param {string} name The new name
   */
  async onRenamed(name) {
    this.log('IthoCveWifi was renamed');
  }

  /**
   * onDeleted is called when the user deleted the device.
   */
  async onDeleted() {
    this.homey.clearInterval(this.pollingInterval);
    this.log('IthoCveWifi has been deleted');
  }

  onDiscoveryResult(discoveryResult) {
    // Return a truthy value here if the discovery result matches your device.
    return discoveryResult.id === this.getData().id;
  }

  async onDiscoveryAvailable(discoveryResult) {
    // This method will be executed once when the device has been found (onDiscoveryResult returned true)
  }

  onDiscoveryAddressChanged(discoveryResult) {
    // Update your connection details here, reconnect when the device is offline
    const settings = this.getSettings();
    this.setSettings({ host: discoveryResult.address }).catch(this.error);
    this.api.setSettings(discoveryResult.address, settings.username, settings.password, settings.isAuthenticated, settings.enableVirtualRemote);
  }

  onDiscoveryLastSeenChanged(discoveryResult) {
    // When the device is offline, try to reconnect here
  }

};
