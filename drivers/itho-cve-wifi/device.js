'use strict';

const Homey = require('homey');
const NRGWatchApi = require('../../lib/nrgwatch-api');
const VirtualRemoteModus = require('../../lib/virtual-remote-modus');

module.exports = class IthoCveWifi extends Homey.Device {

  /**
   * onInit is called when the device is initialized.
   */
  async onInit() {
    this.api = new NRGWatchApi();
    this.api.setHomeyObject(this.homey);
    this.settings = this.getSettings();
    this.log(this.settings);
    this.api.setSettings(this.settings.host, this.settings.username, this.settings.password, this.settings.isAuthenticated, this.settings.enableVirtualRemote);

    // Initial status update
    await this.updateStatus();

    // Update status every 10 minutes
    this.pollingInterval = this.homey.setInterval(() => {
      this.updateStatus();
    }, (this.settings.refreshInterval ?? 15) * 1000);

    this.registerCapabilityListener('fan_mode', async (value) => {
      this.log('Setting fan_mode to', value);
      return this.api.setFanMode(value);
    });

    this.registerCapabilityListener('fan_speed', async (value) => {
      this.log('Setting fan_speed to', value);
      return this.api.setFanSpeed(value);
    });

    this.registerCapabilityListener('button.leave', async (value) => {
      this.log('Setting fan_mode to', 'leave');
      return this.api.setFanMode('leave');
    });

    this.registerCapabilityListener('button.join', async (value) => {
      this.log('Setting fan_mode to', 'join');
      return this.api.setFanMode('join');
    });

    await this.createAndRemoveCabapilities();

    this.log('IthoCveWifi has been initialized');
  }

  async createAndRemoveCabapilities() {
    if (!this.hasCapability('measure_co2')) {
      await this.addCapability('measure_co2');
      this.log('Added measure_co2 capability');
    }
    if (!this.hasCapability('fan_mode')) {
      await this.addCapability('fan_mode');
      this.log('Added fan_mode capability');
    }
    if (!this.settings.enableVirtualRemote) {
      if (!this.hasCapability('fan_speed')) {
        await this.addCapability('fan_speed');
        this.log('Added fan_speed capability');
      }
      if (this.hasCapability('button.join')) {
        await this.removeCapability('button.join');
        this.log('Removed button.join capability');
      }
      if (this.hasCapability('button.leave')) {
        await this.removeCapability('button.leave');
        this.log('Removed button.leave capability');
      }
    } else {
      if (this.hasCapability('fan_speed')) {
        await this.removeCapability('fan_speed');
      }
      if (!this.hasCapability('button.join')) {
        await this.addCapability('button.join');
        this.log('Added button.join capability');
      }
      if (!this.hasCapability('button.leave')) {
        await this.addCapability('button.leave');
        this.log('Added button.leave capability');
      }
    }
    if (!this.hasCapability('measure_humidity')) {
      await this.addCapability('measure_humidity');
      this.log('Added measure_humidity capability');
    }
    if (!this.hasCapability('measure_temperature')) {
      await this.addCapability('measure_temperature');
      this.log('Added measure_temperature capability');
    }
    if (!this.hasCapability('measure_speed.fan_speed')) {
      await this.addCapability('measure_speed.fan_speed');
      this.log('Added measure_speed.fan_speed capability');
    }
    if (!this.hasCapability('measure_speed.fan_setpoint')) {
      await this.addCapability('measure_speed.fan_setpoint');
      this.log('Added measure_speed.fan_setpoint capability');
    }
    if (!this.hasCapability('measure_speed.ventilation_setpoint')) {
      await this.addCapability('measure_speed.ventilation_setpoint');
      this.log('Added measure_speed.ventilation_setpoint capability');
    }
    if (!this.hasCapability('measure_number.startup_counter')) {
      await this.addCapability('measure_number.startup_counter');
      this.log('Added measure_number.startup_counter capability');
    }
    if (!this.hasCapability('measure_number.total_operating_hours')) {
      await this.addCapability('measure_number.total_operating_hours');
      this.log('Added measure_number.total_operating_hours capability');
    }
    // fallback for old settings
    if (this.settings.enableVirtualRemote && (this.settings.virtualRemoteType === undefined || this.settings.virtualRemoteType === '')) {
      this.settings.virtualRemoteType = 'rft-auto';
      await this.setSettings(this.settings);
    }
    await this.setFanModeOptions();
  }

  async setFanModeOptions() {
    const options = this.getCapabilityOptions('fan_mode');
    if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-cve') {
        options.values = [
          VirtualRemoteModus.AWAY,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-auto') {
        options.values = [
          VirtualRemoteModus.AUTO,
          VirtualRemoteModus.AUTONIGHT,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-n') {
        options.values = [
          VirtualRemoteModus.AWAY,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-auto-n') {
        options.values = [
          VirtualRemoteModus.AUTO,
          VirtualRemoteModus.AUTONIGHT,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-df-qf') {
        options.values = [
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.COOK30,
          VirtualRemoteModus.COOK60,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-rv') {
        options.values = [
          VirtualRemoteModus.AUTO,
          VirtualRemoteModus.AUTONIGHT,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-co2') {
        options.values = [
          VirtualRemoteModus.AUTO,
          VirtualRemoteModus.AUTONIGHT,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-pir') {
        options.values = [
          VirtualRemoteModus.MOTION_ON,
          VirtualRemoteModus.MOTION_OFF
          ];
    } else if (this.settings.enableVirtualRemote && this.settings.virtualRemoteType == 'rft-spider') {
        options.values = [
          VirtualRemoteModus.AUTO,
          VirtualRemoteModus.AUTONIGHT,
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
          ];
    } else {
        options.values = [
          VirtualRemoteModus.LOW,
          VirtualRemoteModus.MEDIUM,
          VirtualRemoteModus.HIGH,
          VirtualRemoteModus.TIMER1,
          VirtualRemoteModus.TIMER2,
          VirtualRemoteModus.TIMER3
        ];
    }

    await this.setCapabilityOptions('fan_mode', options);
  }

  async updateStatus() {
    try {
      const status = await this.api.getStatus();
      this.log('Fetched IthoCveWifi status');
      this.setCapabilityValue('measure_temperature', status.temp)
        .catch(this.error);
      this.setCapabilityValue('measure_humidity', status.hum)
        .catch(this.error);
      this.setCapabilityValue('measure_co2', status['CO2level (ppm)'] ?? status['Highest CO2 concentration (ppm)'] ?? status['co2level_ppm'] ?? status['highest-co2-concentration_ppm'])
        .catch(this.error);
      this.setCapabilityValue('measure_speed.fan_speed', status['Fan setpoint (rpm)'] ?? status['fan-setpoint_rpm'])
        .catch(this.error);
      this.setCapabilityValue('measure_speed.fan_setpoint', status['Fan speed (rpm)'] ?? status['fan-speed_rpm'])
        .catch(this.error);
      this.setCapabilityValue('measure_speed.ventilation_setpoint', status['Ventilation setpoint (%)'] ?? status['ventilation-setpoint_perc'])
        .catch(this.error);
      this.setCapabilityValue('measure_number.startup_counter', status['Startup counter'] ?? status['startup-counter'] ?? -1)
        .catch(this.error);
      this.setCapabilityValue('measure_number.total_operating_hours', status['Total operation (hours)'] ?? status['total-operation_hours'] ?? -1)
        .catch(this.error);
      if (status.Selection === 2 || status.selection === 2) {
        await this.setCapabilityValue('fan_mode', 'low');
      } else if (status.Selection === 3 || status.selection === 3) {
        await this.setCapabilityValue('fan_mode', 'medium');
      } else if (status.Selection === 4 || status.selection === 4) {
        await this.setCapabilityValue('fan_mode', 'high');
      } else if (status.Selection === 5 || status.selection === 5) {
        await this.setCapabilityValue('fan_mode', 'timer1');
      } else if (status.Selection === 7 || status.selection === 7) {
        await this.setCapabilityValue('fan_mode', 'auto');
      } else {
        // Unknown mode, set to auto
      }

    } catch (error) {
      this.error('Error fetching IthoCveWifi status:', error);
    }
  }

  /**
   * onAdded is called when the user adds the device, called just after pairing.
   */
  async onAdded() {
    this.log('IthoCveWifi has been added');
  }

  /**
   * onSettings is called when the user updates the device's settings.
   * @param {object} event the onSettings event data
   * @param {object} event.oldSettings The old settings object
   * @param {object} event.newSettings The new settings object
   * @param {string[]} event.changedKeys An array of keys changed since the previous version
   * @returns {Promise<string|void>} return a custom message that will be displayed
   */
  async onSettings({
    oldSettings,
    newSettings,
    changedKeys
  }) {
    this.api.setSettings(newSettings.host, newSettings.username, newSettings.password, newSettings.isAuthenticated, newSettings.enableVirtualRemote);

    if (!newSettings.enableVirtualRemote) {
      if (!this.hasCapability('fan_speed')) {
        await this.addCapability('fan_speed');
        this.log('Added fan_speed capability');
      }
    } else {
      if (this.hasCapability('fan_speed')) {
        await this.removeCapability('fan_speed');
      }
    }

    await this.setFanModeOptions();

    // Initial status update
    await this.updateStatus();

    // Clear previous interval
    this.homey.clearInterval(this.pollingInterval);

    // Update status every 10 minutes
    this.pollingInterval = this.homey.setInterval(() => {
      this.updateStatus();
    }, (newSettings.refreshInterval ?? 15) * 1000);
    this.log('IthoCveWifi settings where changed');
  }

  /**
   * onRenamed is called when the user updates the device's name.
   * This method can be used this to synchronise the name to the device.
   * @param {string} name The new name
   */
  async onRenamed(name) {
    this.log('IthoCveWifi was renamed');
  }

  /**
   * onDeleted is called when the user deleted the device.
   */
  async onDeleted() {
    this.homey.clearInterval(this.pollingInterval);
    this.log('IthoCveWifi has been deleted');
  }

  onDiscoveryResult(discoveryResult) {
    // Return a truthy value here if the discovery result matches your device.
    return discoveryResult.id === this.getData().id;
  }

  async onDiscoveryAvailable(discoveryResult) {
    // This method will be executed once when the device has been found (onDiscoveryResult returned true)
  }

  onDiscoveryAddressChanged(discoveryResult) {
    // Update your connection details here, reconnect when the device is offline
    const settings = this.getSettings();
    this.setSettings({ host: discoveryResult.address })
      .catch(this.error);
    this.api.setSettings(discoveryResult.address, settings.username, settings.password, settings.isAuthenticated, settings.enableVirtualRemote);
  }

  onDiscoveryLastSeenChanged(discoveryResult) {
    // When the device is offline, try to reconnect here
  }

};
